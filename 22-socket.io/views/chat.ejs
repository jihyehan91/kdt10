<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>socket.io</title>
  <!-- cdn -->
  <script src="/socket.io/socket.io.js"></script>
  <style>
    /* 실습2 채팅창 UI */
    .chat-list {
      background-color: skyblue;
      width: 50%;
      height: 500px;
      padding: 10px;
      overflow-y: auto;
    }

    .chat-list div {
      margin-top: 3px;
    }

    .chat-list div div {
      display: inline-block;
      padding: 3px;
    }

    .my-chat {
      text-align: right;
    }

    .my-chat div {
      background-color: yellow;
    }

    .other-chat div {
      background-color: white;
    }

    /* 실습3 채팅창 입장 안내 문구 */
    .notice {
      text-align: center;
      color: #005397;
      font-size: 12px;
    }

    /* 실습5 */
    .d-none {
      display: none;
    }

    .secret-chat div {
      background-color: pink;
    }
  </style>
</head>

<body>
  <h1>My Chat</h1>

  <!-- 실습1 각 버튼을 누를 때마다 서버로 메시지 보내기-->
  <button onclick="sayHello()">Hello</button>
  <button onclick="sayStudy()">Study</button>
  <button onclick="sayBye()">Bye</button>
  <p id="server-result"></p>
  <br><br>

  <!-- 실습5. 채팅방 입장 버튼 -->
  <button type="button" class="join-btn" onclick="join()">입장</button>

  <!-- 실습2 채팅창 UI 만들기-->
  <main class="chat-box d-none">
    <div class="chat-list">
      <!-- 임시 대화 데이터 -->
      <!-- <div class="my-chat">
        <div>user1: msg1</div>
      </div>
      <div class="other-chat">
        <div>user2: msg2</div>
      </div> -->
    </div>

    <!-- 메시지 전송 영역 -->
    <select id="user-list"></select>에게
    <input type="text" id="message" onkeydown="if(window.event.keyCode == 13){send()}">
    <button type="button" onclick="send()">전송</button>
  </main>


  <!-- script -->
  <script>
    // 소켓 사용을 위한 객체 생성
    const socket = io.connect();

    socket.on('connect', () => {
      console.log('클라이언트 연결 완료 >', socket.id);
    })

    /* 실습1
    // hello라는 이벤트 명으로 서버에 보냄
    // hello emit
    function sayHello() {
      socket.emit('hello', {
        who: 'client',
        msg: 'hello'
      })
    }

    // 서버에서 보낸 데이터
    // helloKR on
    socket.on('helloKR', (data) => {
      console.log(data);
      document.getElementById('server-result').textContent = `${data.who} : ${data.msg}`

    })

    // study
    function sayStudy() {
      socket.emit('study', {
        who: 'client',
        msg: 'study'
      })
    }
    socket.on('studyKR', (data) => {
      document.getElementById('server-result').textContent = `${data.who} : ${data.msg}`
    })

    // Bye
    function sayBye() {
      socket.emit('bye', {
        a: 'c',
        b: 'd'
      })
      socket.on('byeKR', (data) => {
        document.getElementById('server-result').textContent = `${data.a} : ${data.b}`
      })
    }
    */



    // 실습3 채팅창 입장 안내 문구
    // on이면 서버에서 emit을 해줘야 함 
    socket.on('notice', (msg) => {
      document.querySelector('.chat-list').insertAdjacentHTML('beforeend', `<div class='notice'>${msg}</div>`)
    })

    // 실습4 채티창 메시지 전송
    // 1. 인풋창에 메시지를 입력, 전송 버튼 클릭, 서버에다가 emit내용 보내기
    // 2. (서버) send 이벤트 받아서 모두에게 newMessage(새로운 이벤트)로 아이디, 메시지를 보내기
    // 3. (클라) newMessage 이벤트를 받아서 화면에 내가 보낸 메시지인지 아닌지를 판별해서 class명 지정해서 화면에 보여주기

    // 서버에 보내기
    function send() {
      const data = {
        // 전체: all, dm: socket.id
        dm: document.getElementById('user-list').value,
        id: socket.id,
        msg: document.getElementById('message').value
      }
      // 1. 인풋창에 메시지를 입력, 전송 버튼 클릭, 서버에다가 emit내용 보내기
      socket.emit('send', data);
      document.getElementById('message').value = ''; // 인풋 초기화

      socket.on('resend', (data) => {
        console.log(data);
        const myChat = document.getElementsByClassName('my-chat');
      })
    }

    // 3. (클라) newMessage 이벤트를 받아서 화면에 내가 보낸 메시지인지 아닌지를 판별해서 class명 지정해서 화면에 보여주기
    //서버에서 받아서 보여주기
    socket.on('newMessage', (data) => {
      // { id: 'KftlnUIiMMXsJzUqAAAD', msg: '서일페' }
      /*
      <div class="my-chat">
        <div>user1: msg1</div>
      </div>
      <div class="other-chat">
        <div>user2: msg2</div>
      </div>
      */
      const chatList = document.querySelector('.chat-list');
      const div = document.createElement('div'); // my-chat or other-chat
      const divChat = document.createElement('div'); // 안쪽 div

      if (data.id === socket.id) {
        // 내가 보낸 메시지
        div.classList.add('my-chat');
      } else {
        // 다른 사람이 보낸 메시지
        div.classList.add('other-chat');
      }

      if (data.dm) {
        div.classList.add('secret-chat');
        divChat.textContent = data.dm; // '(DM) '
      }

      divChat.textContent += `${data.id} : ${data.msg}`;
      div.append(divChat);
      chatList.append(div);

      // 메시지가 많아져서 스크롤리 생기더라도 하단 고정
      chatList.scrollTop = chatList.scrollHeight;
    })

    // 실습5 DM
    function join() {
      socket.emit('setUserList', {
        id: socket.id
      });
    }

    // 입장 성공: 입장 버튼 비활성화, 채팅창 보이기
    socket.on('entrySuccess', (id) => {
      // 버튼 비활성화
      document.querySelector('.join-btn').disabled = true;
      // 채팅창 보이기
      document.querySelector('.chat-box').classList.remove('d-none');
    })

    // 유저 목록 업데이트 (select 박스의 option 태그 개수 변경)
    socket.on('updateUsers', (userObjs) => {
      // userObjs: {socket.id: socket.id, ...}
      console.log('UserList >', userObjs);

      let options = `<option value='all'>전체</option>`;

      // todo: userObjs 반복 돌아서 option 태그 추가
      // option 태그의  value값 socket.id값
      for (let key in userObjs) {
        // 본인 제외
        if (key !== socket.id) {
          options += `<option value=${key}>${key}</option>`
        }
      }

      document.querySelector('#user-list').innerHTML = options;
    })
  </script>
</body>

</html>